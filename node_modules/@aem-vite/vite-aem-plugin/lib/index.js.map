{"version":3,"sources":["../src/index.ts","../src/helpers.ts"],"sourcesContent":["import { bundlesImportRewriter } from '@aem-vite/import-rewriter'\n\nimport { configureAemProxy, debug, isObject, setBundleEntries, setResolvedConfig } from './helpers'\n\nimport type { PluginOption, ProxyOptions } from 'vite'\nimport type { PluginOptions } from './types'\n\nexport function viteForAem(options: PluginOptions): PluginOption[] {\n  if (!options) {\n    throw new Error('No options were provided.')\n  }\n\n  const aemOptions = options.aem\n  const aemUrl = `http://${aemOptions?.host ?? 'localhost'}:${aemOptions?.port ?? 4502}`\n\n  if (!options.publicPath || !options.publicPath.length) {\n    throw new Error('A public path is required for the proxy server to find and inject Vite DevServer!')\n  }\n\n  debug('using AEM URL: %s', aemUrl)\n  debug('options:', aemOptions)\n\n  const aemProxySegments = [\n    ...(options.aemProxySegments ?? []),\n    'aem',\n    'apps',\n    'bin',\n    'conf',\n    'content',\n    'crx',\n    'etc',\n    'etc.clientlibs',\n    'home',\n    'libs',\n    'login',\n    'mnt',\n    'system',\n    'var',\n    '(assets|editor|sites|screens)',\n  ]\n\n  const aemProxySegmentsExp = new RegExp(`^/(${aemProxySegments.join('|')}(.html)?)/.*`).source\n\n  const aemContentPathsExp = `^/content/(${options.contentPaths.join('|')})(/.*)?`\n\n  debug('aem content paths:', aemContentPathsExp)\n  debug('aem request segments:', aemProxySegmentsExp)\n\n  const plugins: PluginOption[] = [\n    {\n      enforce: 'pre',\n      name: 'aem-vite:vite-aem-plugin',\n\n      config(config) {\n        const baseProxyOptions: ProxyOptions = {\n          autoRewrite: true,\n          changeOrigin: true,\n          preserveHeaderKeyCase: true,\n          secure: false,\n          target: aemUrl,\n\n          // These headers makes AEM believe that all requests are been made internally. This is important\n          // to ensure that redirects and such behave correctly.\n          headers: {\n            Host: aemUrl.replace(/(^\\w+:|^)\\/\\//, ''),\n            Origin: aemUrl,\n            Referer: aemUrl,\n          },\n        }\n\n        debug('proxy options:', baseProxyOptions)\n\n        config.build = {\n          ...(config.build || {}),\n\n          // Always prefer maximum browser compatibility\n          target: 'es2015',\n        }\n\n        config.server = {\n          ...(config.server || {}),\n\n          open: config.server?.open ?? true,\n          strictPort: true,\n\n          proxy: {\n            [aemContentPathsExp]: {\n              ...baseProxyOptions,\n              protocolRewrite: 'http',\n              selfHandleResponse: true,\n\n              // Use a proxy response handler to dynamically change the response content for specific pages\n              configure: configureAemProxy(aemUrl, options),\n            },\n\n            // Handle all other AEM based requests\n            [aemProxySegmentsExp]: {\n              ...baseProxyOptions,\n            },\n\n            // Handle the initial interaction between the Vite DevServer and AEM\n            '^/(index.html)?$': {\n              ...baseProxyOptions,\n              followRedirects: true,\n            },\n          },\n        }\n\n        return config\n      },\n\n      configResolved(config) {\n        setResolvedConfig(config)\n\n        const buildInput = config.build.rollupOptions?.input\n\n        let bundleEntries: string[] = []\n\n        if (buildInput) {\n          if (typeof buildInput === 'string') {\n            bundleEntries = [buildInput]\n          } else if (Array.isArray(buildInput)) {\n            bundleEntries = [...new Set(buildInput)]\n          } else if (isObject(buildInput)) {\n            bundleEntries = Object.values(buildInput)\n          } else {\n            throw new Error(\n              'Invalid value detected for rollupOptions.input. Please ensure it is a string, array or alias object.',\n            )\n          }\n        } else {\n          throw new Error('No input option(s) was provided via rollupOptions.input.')\n        }\n\n        setBundleEntries(bundleEntries)\n      },\n    },\n  ]\n\n  // Enable the import rewriter when options are passed through\n  if (options.rewriterOptions) {\n    const { caching, minify, resourcesPath } = options.rewriterOptions\n\n    plugins.push(\n      bundlesImportRewriter({\n        caching,\n        publicPath: options.publicPath,\n        minify,\n        resourcesPath,\n      }),\n    )\n  }\n\n  return plugins\n}\n","import _debug from 'debug'\nimport zlib from 'node:zlib'\n\nimport viteReact from '@vitejs/plugin-react'\n\nimport type { HttpProxy, ResolvedConfig } from 'vite'\nimport type { PluginOptions } from './types'\n\nconst prefix = '[vite-aem-plugin]'\n\nlet bundleEntries: string[]\nlet resolvedConfig: ResolvedConfig\n\nexport const debug = _debug('vite-aem-plugin')\n\nexport function isObject(value: unknown): value is Record<string, unknown> {\n  return Object.prototype.toString.call(value) === '[object Object]'\n}\n\n/**\n * Retrieves the Vite DevServer `link`/`script` tags.\n *\n * @returns Vite DevServer tags\n */\nfunction getViteScripts() {\n  const entries: string[] = []\n\n  for (const source of bundleEntries) {\n    if (/\\.(js|ts)x?/.test(source)) {\n      entries.push(`<script type=\"module\" src=\"/${source}\"></script>`)\n    } else if (/\\.(css|less|sass|scss|postcss)/.test(source)) {\n      entries.push(`<link rel=\"stylesheet\" href=\"/${source}\"/>`)\n    }\n  }\n\n  let scripts = `\n<script type=\"module\" src=\"/@vite/client\"></script>\n${entries.join('\\n')}\n`\n\n  const isUsingReact = resolvedConfig.plugins.find(({ name }) => name === 'vite:react-refresh')\n\n  if (isUsingReact) {\n    scripts += `\n<script type=\"module\">\n  ${viteReact.preambleCode.replace('__BASE__', resolvedConfig.base)}\n</script>\n    `\n  }\n\n  return scripts\n}\n\n/**\n * Replace the AEM URL with the Vite DevServer URL to prevent any weird redirect bugs.\n *\n * @param input header value\n * @param aemUrl target url for the AEM instance\n * @returns an updated header value without the AEM URL\n */\nfunction replaceUrl(input: string | undefined, aemUrl: string) {\n  return (input || '').replace(aemUrl, `http://${resolvedConfig.server.host}:${resolvedConfig.server.port}`)\n}\n\nexport function setBundleEntries(entries: string[]) {\n  if (!bundleEntries) {\n    bundleEntries = entries\n  }\n}\n\n/**\n * Store the resolved Vite configuration so we can use it elsewhere.\n *\n * @param config resolved Vite configuration\n */\nexport function setResolvedConfig(config: ResolvedConfig) {\n  if (!resolvedConfig) {\n    resolvedConfig = config\n  }\n}\n\n/**\n * Handles the proxy interactions between Vite and AEM to generate custom responses.\n * Inspired by https://github.com/adobe/aem-site-theme-builder.\n *\n * @param aemUrl target url for the AEM instance\n * @param options AEM Vite options\n * @param config current Vite configuration\n * @returns an HTTP proxy callback\n */\nexport function configureAemProxy(aemUrl: string, options: PluginOptions) {\n  const clientlibsExpression = new RegExp(\n    `<(?:script|link).*(?:src|href)=\"${\n      options.clientlibsExpression ?? options.publicPath\n    }.(?:css|js)\"(([\\\\w+])=['\"]([^'\"]*)['\"][^>]*>|[^>]*></script>|>)`,\n    'g',\n  )\n\n  debug('clientlibs (custom) expression', options.clientlibsExpression)\n  debug('clientlibs expression', clientlibsExpression)\n\n  return (proxy: HttpProxy.Server) => {\n    proxy.on('proxyRes', (proxyRes, req, res) => {\n      const requestUrl = req.url as string\n      const proxyHeaders = proxyRes && proxyRes.headers\n\n      const isHtmlRequest =\n        proxyHeaders &&\n        proxyHeaders['content-type'] &&\n        proxyHeaders['content-type'].match(/(text\\/html|application\\/xhtml+xml)/)\n\n      debug('is html request?', requestUrl, isHtmlRequest)\n\n      const isGzipedRequest =\n        proxyHeaders && proxyHeaders['content-encoding'] && proxyHeaders['content-encoding'].includes('gzip')\n\n      let cookieHeader = proxyHeaders && proxyHeaders['set-cookie']\n\n      // Pass-through the status code\n      res.statusCode = proxyRes.statusCode || 200\n\n      if (isHtmlRequest) {\n        const body: Uint8Array[] = []\n\n        proxyRes.on('data', (chunk) => body.push(chunk))\n\n        proxyRes.on('end', () => {\n          const data = Buffer.concat(body)\n          const html = isGzipedRequest ? zlib.unzipSync(data).toString() : data.toString()\n\n          debug('parsing request for:', requestUrl)\n          debug('content length', html.length)\n\n          const matches = html.match(clientlibsExpression)\n\n          debug('total clientlib matches:', matches)\n\n          let replacedHtml = html\n\n          if (matches) {\n            debug('stripping matched clientlibs:', matches)\n\n            matches.forEach((match, index) => {\n              // Replace the last matched ClientLib with the Vite DevServer script tags\n              replacedHtml = replacedHtml.replace(match, index === matches.length - 1 ? getViteScripts() : '')\n            })\n          }\n\n          const isHtmlModified = replacedHtml.length !== html.length\n\n          debug('has content changed?', isHtmlModified ? 'yes' : 'no')\n\n          if (isHtmlModified) {\n            try {\n              res.setHeader('content-encoding', '')\n              res.setHeader('content-type', 'text/html')\n              res.removeHeader('content-length')\n              res.end(replacedHtml)\n\n              debug(`proxy ${requestUrl} with Vite DevServer entries`)\n            } catch (err) {\n              console.error('Something went wrong!\\n\\n', err.message)\n            }\n          } else {\n            res.end(data.toString('binary'))\n\n            debug(`proxy ${requestUrl} without changes.`)\n          }\n        })\n      } else {\n        proxyRes.pipe(res)\n      }\n\n      // Remove the `secure` attribute from cookies to support Chrome\n      if (cookieHeader) {\n        cookieHeader = cookieHeader.map((val) => val.replace('Secure;', ''))\n      }\n\n      // Set headers to be sent to client\n      for (const header in proxyHeaders) {\n        const headerValue = proxyHeaders[header]\n\n        if (Array.isArray(headerValue)) {\n          res.setHeader(\n            header,\n            headerValue.map((h) => replaceUrl(h, aemUrl)),\n          )\n        } else {\n          res.setHeader(header, replaceUrl(headerValue, aemUrl))\n        }\n      }\n    })\n\n    proxy.on('error', (err, _req, res) => {\n      res.writeHead(500, {\n        'Content-Type': 'text/plain',\n      })\n\n      res.end(`${prefix} Something went wrong!\\n\\n${err.message}`)\n    })\n  }\n}\n"],"mappings":"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","names":["_debug","viteReact","zlib","bundleEntries"]}