{"version":3,"sources":["../src/bundles.ts","../src/helpers.ts"],"sourcesContent":["import { writeFileSync } from 'fs'\nimport { join } from 'path'\n\nimport { init, parse as parseImports } from 'es-module-lexer'\nimport MagicString from 'magic-string'\n\nimport {\n  debug,\n  getAemClientLibPath,\n  getEntryPaths,\n  getReplacementPath,\n  isOutputChunk,\n  relativePathPattern,\n  setEntryPath,\n} from './helpers'\n\nimport type { ImportSpecifier } from 'es-module-lexer'\nimport type { InputOptions, NormalizedOutputOptions } from 'rollup'\nimport type { PluginOption } from 'vite'\n\nimport type { BundlesImportRewriterOptions } from './types'\n\n/**\n * Identifies all ES imports and converts them into AEM ClientLib compliant paths.\n *\n * @param options import rewriter options\n */\nexport function bundlesImportRewriter(options: BundlesImportRewriterOptions): PluginOption {\n  const entryAliases: NonNullable<InputOptions['input']> = {}\n\n  return {\n    apply: 'build',\n    enforce: 'post',\n    name: 'aem-vite:import-rewriter',\n\n    configResolved(config) {\n      const inputs = config.build.rollupOptions.input\n\n      if (!inputs || typeof inputs !== 'object' || Array.isArray(inputs)) {\n        throw new Error(\n          'Missing valid input aliases which are required to map to an AEM ClientLib path, see https://www.aemvite.dev/guide/front-end/vite/#source-structure for more information.',\n        )\n      }\n\n      for (const [key, value] of Object.entries(inputs)) {\n        if (/(ts|js)x?$/.test(value)) {\n          entryAliases[key] = value\n        }\n      }\n\n      if (Object.keys(entryAliases).length > 1) {\n        throw new Error(\n          'Invalid number of JavaScript inputs provided. Only a single input is currently supported which is a limitation of AEM ClientLibs. It is recommended to create a second ClientLib and Vite config if you need to meet this need.',\n        )\n      }\n    },\n\n    async renderChunk(source, chunk, rollupOptions) {\n      if (rollupOptions.format !== 'es') {\n        return null\n      }\n\n      if (!options.publicPath || !options.publicPath.length) {\n        this.error(\n          `'publicPath' doesn't appear to be defined, see https://aemvite.dev/guide/faqs/#vite-errors for more information.`,\n        )\n      }\n\n      if (chunk.isEntry && chunk.facadeModuleId && /(ts|js)x?$/.test(chunk.facadeModuleId)) {\n        debug('setting new entry path: %s\\n', chunk.fileName)\n\n        setEntryPath(chunk.fileName)\n      }\n\n      await init\n\n      let imports: ReadonlyArray<ImportSpecifier> = []\n      try {\n        imports = parseImports(source)[0]\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } catch (e: any) {\n        this.error(e, e.idx)\n      }\n\n      if (!imports.length) {\n        return null\n      }\n\n      let s!: MagicString\n      const str = () => s || (s = new MagicString(source))\n\n      for (let index = 0; index < imports.length; index++) {\n        const { e: end, d: dynamicIndex, n: importPath, s: start } = imports[index]\n\n        if (dynamicIndex === -1 && importPath && relativePathPattern.test(importPath)) {\n          const replacementPath = getReplacementPath(chunk.fileName, importPath, options, entryAliases)\n\n          debug('render chunk (dynamic import) chunk: %s', chunk.fileName)\n          debug('render chunk (dynamic import) import: %s', importPath)\n          debug('render chunk (dynamic import) replacement: %s\\n', replacementPath)\n\n          str().overwrite(start, end, replacementPath)\n        }\n      }\n\n      if (s) {\n        return {\n          code: s.toString(),\n          map: rollupOptions.sourcemap !== false ? s.generateMap({ hires: true }) : null,\n        }\n      }\n\n      return null\n    },\n\n    async writeBundle(rollupOptions, bundles) {\n      const aemClientLibPath = getAemClientLibPath(options)\n\n      for (const [fileName, chunk] of Object.entries(bundles)) {\n        if (!isOutputChunk(chunk) || !chunk.code) {\n          continue\n        }\n\n        const source = chunk.code\n\n        await init\n\n        let imports: ReadonlyArray<ImportSpecifier> = []\n        try {\n          imports = parseImports(source)[0]\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } catch (e: any) {\n          this.error(e, e.idx)\n        }\n\n        if (!imports.length) {\n          continue\n        }\n\n        let s!: MagicString\n        const str = () => s || (s = new MagicString(source))\n\n        for (let index = 0; index < imports.length; index++) {\n          const { e: end, d: dynamicIndex, n: importPath, s: start } = imports[index]\n\n          // Native imports\n          if (dynamicIndex === -1 && importPath && relativePathPattern.test(importPath)) {\n            const replacementPath = getReplacementPath(chunk.fileName, importPath, options, entryAliases)\n\n            debug('write bundle (native import) chunk: %s', chunk.fileName)\n            debug('write bundle (native import) import: %s\\n', importPath)\n\n            str().overwrite(start, end, replacementPath)\n          }\n\n          // Dynamic imports\n          if (dynamicIndex > -1 && importPath) {\n            debug('write bundle (dynamic import) chunk: %s', chunk.fileName)\n            debug('write bundle (dynamic import) import: %s\\n', importPath)\n\n            const dynamicEnd = source.indexOf(')', end) + 1\n            const original = source.slice(dynamicIndex + 8, dynamicEnd - 2)\n\n            debug(\n              'write bundle (dynamic import) replacement:',\n              getReplacementPath(chunk.fileName, importPath, options, entryAliases),\n            )\n\n            if (!original.startsWith('/')) {\n              str().overwrite(start + 1, end - 1, getReplacementPath(chunk.fileName, importPath, options, entryAliases))\n            }\n          }\n        }\n\n        let aemImportPath = aemClientLibPath\n        let newSource = (s && s.toString()) || source\n\n        if (options.caching && options.caching.enabled) {\n          aemImportPath = getAemClientLibPath(options, false, true, rollupOptions as NormalizedOutputOptions)\n        }\n\n        // Ensure all entry file imports are replaced with the correct AEM ClientLib path\n        newSource = newSource.replace(new RegExp(aemClientLibPath, 'g'), aemImportPath)\n\n        // Replace any entry paths\n        const relativeClientLibPath = aemImportPath.substring(aemImportPath.lastIndexOf('/') + 1)\n\n        getEntryPaths().forEach((path) => {\n          newSource = newSource.replace(new RegExp(path, 'g'), relativeClientLibPath)\n        })\n\n        writeFileSync(join(rollupOptions.dir as string, fileName), newSource)\n      }\n    },\n  }\n}\n","import { createHash } from 'crypto'\nimport _debug from 'debug'\nimport { existsSync, readFileSync } from 'fs'\nimport { join } from 'path'\n\nimport type { InputOptions, NormalizedOutputOptions, OutputAsset, OutputChunk } from 'rollup'\n\nimport type { AEMLongCacheConfiguration, BundlesImportRewriterOptions } from './types'\n\nconst entryPaths = new Set<string>()\n\nexport const debug = _debug('aem-vite-import-rewriter')\nexport const relativePathPattern = /([.]{1,2}\\/)+/\n\n/**\n * Retrieve the entry file paths.\n *\n * @returns entry paths\n */\nexport function getEntryPaths() {\n  return entryPaths\n}\n\n/**\n * Add the provided `path` to the available entry paths.\n *\n * @param path the path to the entry file\n */\nexport function setEntryPath(path: string): void {\n  entryPaths.add(path)\n}\n\n/**\n * Determine if the provided `assetOrChunk` object is a chunk instance.\n *\n * @param assetOrChunk an instance of either `OutputAsset` or `OutputChunk`\n * @returns `true` when `OutputChunk`, otherwise `false`\n */\nexport function isOutputChunk(assetOrChunk: OutputAsset | OutputChunk): assetOrChunk is OutputChunk {\n  return typeof (assetOrChunk as OutputChunk).imports !== undefined\n}\n\n/**\n * Generate an MD5 checksum for the provided `source` input.\n *\n * @param source raw input\n * @returns an MD5 checksum of the `source` input\n */\nexport function generateChecksum(source: string): string {\n  return createHash('md5').update(source, 'utf8').digest('hex')\n}\n\n/**\n * Generates a unique cache key for the provided `path` that importing modules will use to\n * load the correct entry file.\n *\n * @param entryPath the base ClientLib path\n * @param keyFormat HTML Library Manager long cache format\n * @returns a unqiue cache key for the provided `path`\n */\nexport function getCacheKey(entryPath: string, keyFormat: AEMLongCacheConfiguration['keyFormat']): string {\n  let keyFormatString = ''\n\n  switch (keyFormat) {\n    case 'cloud':\n      keyFormatString = 'lc-%s-lc.%m'\n      break\n    case 'acs-classic':\n      keyFormatString = '%s.%m'\n      break\n    case 'acs-modern':\n      keyFormatString = '%m.ACSHASH%s'\n      break\n  }\n\n  const combinedContents = [...entryPaths].map((entry) => {\n    const path = join(entryPath, entry)\n\n    return existsSync(path) ? readFileSync(path).toString() : ''\n  })\n\n  return keyFormatString.replace('%s', generateChecksum(combinedContents.join('')))\n}\n\n/**\n * Constructs an AEM ClientLib path for the current configuration.\n *\n * @param options import rewriter options\n * @param forImport is the ClientLib path for an import?\n * @param withChecksum should a checksum be generated?\n * @param rollupOptions rollup options object\n * @returns the real AEM ClientLib path\n */\nexport function getAemClientLibPath(\n  options: BundlesImportRewriterOptions,\n  forImport = false,\n  withChecksum = false,\n  rollupOptions?: NormalizedOutputOptions,\n): string {\n  let path = options.publicPath\n\n  if (forImport) {\n    return `${path}/${options.resourcesPath}/`\n  }\n\n  if (withChecksum && options.caching && options.caching.enabled && rollupOptions !== undefined) {\n    const entryPath = rollupOptions.dir as string\n\n    // Append the MD5 checksum and minified extension to the path\n    path = `${path}.${getCacheKey(entryPath, options.caching.keyFormat)}`\n    path = path.replace('.%m', options.minify === true ? '.min' : '')\n  }\n\n  return `${path}.js`\n}\n\n/**\n * Converts the standard import path into an AEM compliant ClientLib path.\n *\n * @param parentPath path of the parent (chunk)\n * @param path the import path\n * @param options import rewriter options\n * @param entryAliases rollup entry aliases\n * @returns an AEM compliant ClientLib path\n */\nexport function getReplacementPath(\n  parentPath: string,\n  path: string,\n  options: BundlesImportRewriterOptions,\n  entryAliases: NonNullable<InputOptions['input']>,\n): string {\n  const isEntryPath = entryPaths.has(parentPath)\n\n  if (isEntryPath) {\n    return path.replace(new RegExp(`^${relativePathPattern.source}`), getAemClientLibPath(options, true))\n  }\n\n  return isInputAnEntryAlias(path, entryAliases)\n    ? path.replace(\n        new RegExp(`${relativePathPattern.source}${path.replace(relativePathPattern, '')}`),\n        getAemClientLibPath(options),\n      )\n    : path\n}\n\n/**\n * Determines if the provided `input` is an entry alias or not.\n *\n * @param input the string to check against\n * @param entryAliases rollup entry aliases\n * @returns `true` when `input` is an alias, otherwise `false`\n */\nexport function isInputAnEntryAlias(input: string, entryAliases: NonNullable<InputOptions['input']>) {\n  const entryAliasesExpr = new RegExp(`^[./]+(${Object.keys(entryAliases).join('|')})\\\\.js$`)\n\n  return input.match(entryAliasesExpr)?.[0] ? true : false\n}\n"],"mappings":"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","names":["join","join"]}